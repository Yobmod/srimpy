from numpy import (
    float64,
    ndarray,
)
from srim.core.ion import Ion
from typing import (
    Dict,
    List,
    Union,
)


class EnergyToRecoils:
    def __init__(self, directory: str, filename: str = ...) -> None: ...
    @property
    def depth(self) -> ndarray: ...


class Ioniz:
    def __init__(self, directory: str, filename: str = ...) -> None: ...
    @property
    def depth(self) -> ndarray: ...
    @property
    def ions(self) -> ndarray: ...
    @property
    def recoils(self) -> ndarray: ...


class NoVacancy:
    def __init__(self, directory: str, filename: str = ...) -> None: ...
    @property
    def depth(self) -> ndarray: ...
    @property
    def number(self) -> ndarray: ...


class Phonons:
    def __init__(self, directory: str, filename: str = ...) -> None: ...
    @property
    def depth(self) -> ndarray: ...
    @property
    def ions(self) -> ndarray: ...
    @property
    def recoils(self) -> ndarray: ...


class Range:
    def __init__(self, directory: str, filename: str = ...) -> None: ...
    @property
    def depth(self) -> ndarray: ...


class Results:
    def __init__(self, directory: str) -> None: ...


class SRIM_Output:
    def _read_ion(self, output: bytes) -> Ion: ...
    def _read_num_ions(self, output: bytes) -> int: ...
    def _read_table(self, output: bytes) -> ndarray: ...


class SRResults:
    def __init__(self, directory: str, filename: str = ...) -> None: ...
    def _read_ion_info(self, output: bytes) -> Dict[str, Union[str, int, float]]: ...
    def _read_stopping_table(self, output: bytes) -> ndarray: ...
    def _read_stopping_units(self, output: bytes) -> str: ...
    def _read_target_info(self, output: bytes) -> Dict[str, Union[float64, Dict[str, List[Union[int, float]]]]]: ...
    @property
    def data(self) -> ndarray: ...
    @property
    def ion(self) -> Dict[str, Union[str, int, float]]: ...
    @property
    def target(self) -> Dict[str, Union[float64, Dict[str, List[Union[int, float]]]]]: ...
    @property
    def units(self) -> str: ...


class Vacancy:
    def __init__(self, directory: str, filename: str = ...) -> None: ...
    @property
    def depth(self) -> ndarray: ...
